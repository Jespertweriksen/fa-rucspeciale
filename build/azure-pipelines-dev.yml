# Trigger this pipeline on push to development branch
trigger:
- development

variables:
  # Azure subscription id from the 
  azureSubscription: 'd7f71293-ecd4-4f35-9662-88c5f39c0845'

  # Function app name from the creation script
  functionAppName: 'RUCSpecialeFunctionProject'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/'

# Agent pool
pool: 'Default'
# Could also be an image name from the built-in agents 
# pool:
#   vmImage: 'vs2017-win2016'

stages:
# Build stage handling building the code
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
                    $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Debug
    # Will execute 
    # dotnet build --output $(System.DefaultWorkingDirectory)/publish_output --configuration Debug
    # and put the result in a publish_output folder in the working directory

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    # This will zip the files in the publish_output folder and place them in 
    # $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
    # File will be named with a number representing the BuildId

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop
    # This publishes the zip file so it's availabe outside this stage
    # in folder called 'drop'

- stage: Deploy
# Deploy stage - this stage deploys the function app directly to development environment
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded() # only runs if previous succeeded

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development' # this will tag the deploy, and make it viewable in the "Environments section"

    strategy:
      runOnce:
        deploy:
          # deployment step does the actual deployment
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'